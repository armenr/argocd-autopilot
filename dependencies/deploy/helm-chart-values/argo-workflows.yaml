server:
  ## @param server.enabled Enable server deployment
  ##
  enabled: true
  ## @param server.replicaCount Number of server replicas to deploy
  ##
  replicaCount: 1
  ## server resource requests and limits
  ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
  ## @param server.resources.limits The resources limits for the server containers
  ## @param server.resources.requests The requested resources for the server containers
  ##
  resources:
    limits: {}
    requests: {}
  auth:
    ## @param server.auth.enabled Enable authentication
    ##
    enabled: true
    ## @param server.auth.mode Set authentication mode. Either `server`, `client` or `sso`.
    ##
    mode: server
  ## Base URL for client resources
  ## Ref: https://github.com/argoproj/argo-workflows/issues/716#issuecomment-433213190
  ## @param server.baseHref Base href of the Argo Workflows deployment
  ##
  baseHref: /argo/

## Server ingress parameters
## ref: https://kubernetes.io/docs/user-guide/ingress/
##
ingress:
  ## @param ingress.enabled Enable ingress record generation for server
  ##
  enabled: true
  ## @param ingress.pathType Ingress path type
  ##
  pathType: ImplementationSpecific
  ## @param ingress.hostname Default host for the ingress record
  ##
  hostname: kubernetes.docker.internal
  ## @param ingress.path Default path for the ingress record
  ## NOTE: You may need to set this to '/*' in order to use this with ALB ingress controllers
  ##
  path: /argo
  ## @param ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ## Use this parameter to set the required annotations for cert-manager, see
  ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
  ##
  ## e.g:
  ## annotations:
  ##   kubernetes.io/ingress.class: nginx
  ##   cert-manager.io/cluster-issuer: cluster-issuer-name
  ##
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web
    traefik.ingress.kubernetes.io/router.middlewares: argo-argo-prefix@kubernetescrd
    # traefik.ingress.kubernetes.io/rewrite-target: /$1
    # ingress.kubernetes.io/rewrite-target: /$1
    # traefik.ingress.kubernetes.io/router.middlewares: argo-workflows-argo-prefix@kubernetescrd

  ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
  ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.hostname }}`
  ## You can:
  ##   - Use the `ingress.secrets` parameter to create this TLS secret
  ##   - Relay on cert-manager to create it by setting the corresponding annotations
  ##   - Relay on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
  ##
  tls: false
  ## DEPRECATED: Use ingress.annotations instead of ingress.certManager
  ## certManager: false
  ##

  ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
  ##
  selfSigned: false
  ## @param ingress.extraHosts An array with additional hostname(s) to be covered with the ingress record
  ## e.g:
  ## extraHosts:
  ##   - name: server.local
  ##     path: /
  ##
  extraHosts: []
  ## @param ingress.extraPaths An array with additional arbitrary paths that may need to be added to the ingress under the main host
  ## e.g:
  ## extraPaths:
  ## - path: /*
  ##   backend:
  ##     serviceName: ssl-redirect
  ##     servicePort: use-annotation
  ##
  extraPaths: []

  ## Server service parameters
  ##
  service:
    ## @param server.service.type server service type
    ##
    type: ClusterIP
    ## @param server.service.ports.http server service HTTP port
    ##
    ports:
      http: 80

## @section PostgreSQL subchart

## Postgresql subchart configuration
## @param postgresql.enabled Enable PostgreSQL subchart and controller persistence using PostgreSQL
## @param postgresql.service.port PostgreSQL port
## @param postgresql.postgresqlUsername PostgreSQL username
## @param postgresql.postgresqlDatabase PortgreSQL database name
## @param postgresql.postgresqlPassword PortgreSQL database password
##
postgresql:
  enabled: false
  service:
    port: 5432
  postgresqlUsername: postgres
  postgresqlDatabase: bn_argo_workflows
  postgresqlPassword: ""

## @section MySQL subchart

## Mysql subchart configuration
## @param mysql.enabled Enable MySQL subchart and controller persistence using MySQL
## @param mysql.service.port MySQL port
## @param mysql.auth.username MySQL username
## @param mysql.auth.database MySQL database name
## @param mysql.auth.password MySQL database password
##
mysql:
  enabled: false
  service:
    port: 3306
  auth:
    username: mysql
    database: bn_argo_workflows
    password: ""

## @section External Database configuration

## External Database Configuration
## @param externalDatabase.enabled Enable using externaldatabase and the controller to use persistence with it
## @param externalDatabase.host External Database server host
## @param externalDatabase.port External Database server port
## @param externalDatabase.username External Database username
## @param externalDatabase.password External Database user password
## @param externalDatabase.database External Database database name
## @param externalDatabase.existingSecret The name of an existing secret with database credentials
## @param externalDatabase.type Either postgresql or mysql
##
externalDatabase:
  enabled: false
  ## Either "postgres" or  "mysql"
  ##
  type: ""
  host: localhost
  port: 3306
  username: bn_wordpress
  password: ""
  database: bitnami_wordpress
  ## NOTE: Must contain key `database-password`
  ## NOTE: When it's set, the `externalDatabase.password` parameter is ignored
  ##
  existingSecret: ""
